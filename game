import random
import json


class City:
    def __init__(self, name: str, economy: tuple):
        self.name = name
        self.economy = Economy(economy)


class Economy:
    def __init__(self, product: tuple):
        self.product = product
        self.capital = 0
        self.worker_lst = []
        self.data = []
        self.building = []

        self.load_init_fn()

    def add_building_fn(self, name, cost, level):
        building = Building(name, cost, level)
        if cost <= self.capital:
            self.building.append(building)
            self.capital -= cost
            print("Building added")
        else:
            print("Capital is insufficient")

    def add_worker_fn(self):
        worker = Worker(self.product[0], self.product[1])
        if self.capital >= self.product[1]:
            self.capital -= self.product[1]
            self.worker_lst.append(worker)
            self.save_eko_fn()
            print("Worker is added")
        else:
            print("Capital is insufficient")

    def calculate_product_fn(self):
        total_product = 0
        for worker in self.worker_lst:
            current_product = worker.worker_prodct_fn()
            total_product += current_product

        self.capital += total_product
        self.save_eko_fn()

        return total_product

    def get_worker_nums_fn(self):
        return len(self.worker_lst)

    def get_capital_fn(self):
        return self.capital

    def load_init_fn(self):
        self.data = self._load_json_fl()
        self.capital = self.data[-1]["capital"]

        for i in range(self.data[-1]["worker_nums"]):
            worker = Worker(self.product[0], self.product[1])
            self.worker_lst.append(worker)

    def _load_json_fl(self):
        with open("data.json", "r") as fl:
            data = json.load(fl)
        return data

    def save_eko_fn(self):
        worker = len(self.worker_lst)
        capital = self.capital

        self.data.append({"capital": capital, "worker_nums": worker})

        with open("data.json", "w") as fl:
            json.dump(self.data, fl)


class Building:
    def __init__(self, name, cost, level):
        self.name = name
        self.cost = cost
        self.level = level


class Worker:
    def __init__(self, prodct, cost):
        self.product = prodct
        self.cost = cost

    def worker_prodct_fn(self):
        return random.randint(self.product - 5, self.product + 5)
